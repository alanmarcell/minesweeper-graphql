{"version":3,"sources":["../dist-esnext/index.js"],"names":["schema","json","file","fs","writeFile","JSON","stringify","err","log","getRunningUrl","app","use","static","createGraphqlSchema","config","dir","PORT","path","UserApp","UserRepository","createUserRepository","userRepository","userApp","createApp","seed","graphqlFolder","graphiql","listen","url"],"mappings":";;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;0BASA,iBAAmCA,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuB,sBAAQA,MAAR,gCADvB;;AAAA;AACUC,gBADV;AAEUC,gBAFV,GAEiB,qBAFjB;AAGIC,eAAGC,SAAH,YAAiBF,IAAjB,GAAyBG,KAAKC,SAAL,CAAeL,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAzB,EAAwD,eAAO;AAC3D,kBAAIM,GAAJ,EACI,MAAMA,GAAN;AACJC,kBAAI,sBAAJ,EAA4BC,cAAcP,IAAd,CAA5B;AACH,aAJD;AAKAQ,gBAAIC,GAAJ,CAAQ,SAAR,EAAmB,iBAAQC,MAAR,CAAe,QAAf,CAAnB;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,mB;;;;;;;;;;;AApBf,gBAAOC,MAAP;;AAYA,IAAMN,MAAM,yBAAQ;AAAEO,OAAK;AAAP,CAAR,CAAZ;AACA,IAAML,MAAM,uBAAZ;AACAA,IAAIC,GAAJ,CAAQ,oBAAR;AACAH,IAAI,iBAAJ;AACA,IAAMQ,OAAO,IAAb;;AACA,SAASP,aAAT,CAAuBQ,IAAvB,EAA6B;AACzB,oCAA2BD,IAA3B,SAAkCC,IAAlC;AACH;;AAWD;AAAA;AAAA,wBAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEuBC,OAFvB;AAAA;AAAA,iBAGiCC,eAAeC,oBAAf,sBAA+C,aAA/C,CAHjC;;AAAA;AAAA;AAAA,yBAIWZ,GAJX;AAAA;AAGWa,0BAHX;AAIWb,eAJX;AAAA;AAEac,iBAFb,gBAE+BC,SAF/B;AAAA;AAAA,iBAMaD,QAAQE,IAAR,CAAa,IAAb,CANb;;AAAA;AAOaxB,gBAPb,GAOsB,qBAAOsB,OAAP,EAAgBd,GAAhB,CAPtB;AAQaiB,uBARb,GAQ6B,UAR7B;AASOf,cAAIC,GAAJ,CAAQc,aAAR,EAAuB,6BAAY;AAC/BzB,0BAD+B;AAE/B0B,sBAAU;AAFqB,WAAZ,CAAvB;AATP;AAAA,iBAaab,oBAAoBb,MAApB,CAbb;;AAAA;AAcOU,cAAIiB,MAAJ,CAAWX,IAAX,EAAiB,YAAM;AACnB,gBAAMY,MAAMnB,cAAcgB,aAAd,CAAZ;AACAjB,qCAAkBoB,GAAlB;AACH,WAHD;AAdP;AAAA;;AAAA;AAAA;AAAA;AAoBOpB;;AApBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,K,CAuBA","file":"index.js","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport cors from 'cors';\nimport express from 'express';\nimport GraphQlHttp from 'express-graphql';\nimport * as fs from 'fs';\nimport { graphql } from 'graphql';\nimport { introspectionQuery } from 'graphql/utilities';\nimport Schema from './core/schema';\nimport MONGO_URL from './mongoDbUrl';\nimport * as UserApp from 'ptz-user-app';\nimport * as UserRepository from 'ptz-user-repository';\nimport logFile from 'ptz-log-file';\nconst log = logFile({ dir: './logs' });\nconst app = express();\napp.use(cors());\nlog('starting server');\nconst PORT = 3011;\nfunction getRunningUrl(path) {\n    return `http://localhost:${PORT}${path}`;\n}\nasync function createGraphqlSchema(schema) {\n    const json = await graphql(schema, introspectionQuery);\n    const file = '/public/schema.json';\n    fs.writeFile(`.${file}`, JSON.stringify(json, null, 2), err => {\n        if (err)\n            throw err;\n        log('Json schema created!', getRunningUrl(file));\n    });\n    app.use('/public', express.static('public'));\n}\n(async () => {\n    try {\n        const userApp = UserApp.createApp({\n            userRepository: await UserRepository.createUserRepository(MONGO_URL, 'minesweeper'),\n            log\n        });\n        await userApp.seed(null);\n        const schema = Schema(userApp, log);\n        const graphqlFolder = '/graphql';\n        app.use(graphqlFolder, GraphQlHttp({\n            schema,\n            graphiql: true\n        }));\n        await createGraphqlSchema(schema);\n        app.listen(PORT, () => {\n            const url = getRunningUrl(graphqlFolder);\n            log(`Running on ${url}`);\n        });\n    }\n    catch (e) {\n        log(e);\n    }\n})();\n//# sourceMappingURL=index.js.map"]}