{"version":3,"sources":["../../dist-esnext/users/userSchema.js"],"names":["UserSchema","userApp","log","userType","name","fields","id","type","userName","email","emailConfirmed","displayName","imgUrl","errors","userConnection","nodeType","getUserConnection","connectionType","args","resolve","_","ctx","find","query","options","limit","first","createdBy","getSaveUserMutation","outputViewer","inputFields","password","outputFields","userEdge","edgeType","user","node","cursor","viewer","mutateAndGetPayload","userArgs","param2","param3","save","savedUser","getAuthTokenMutation","userNameOrEmail","authToken","form","getAuthToken"],"mappings":"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","file":"userSchema.js","sourcesContent":["import { GraphQLBoolean, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql';\nimport { connectionArgs, connectionDefinitions, connectionFromPromisedArray, mutationWithClientMutationId } from 'graphql-relay';\nfunction UserSchema({ userApp, log }) {\n    const userType = new GraphQLObjectType({\n        name: 'User',\n        fields: () => ({\n            id: { type: GraphQLString },\n            userName: { type: GraphQLString },\n            email: { type: GraphQLString },\n            emailConfirmed: { type: GraphQLBoolean },\n            displayName: { type: GraphQLString },\n            imgUrl: { type: GraphQLString },\n            // createdBy,\n            // dtChanged,\n            errors: { type: new GraphQLList(GraphQLString) }\n        })\n    });\n    const userConnection = connectionDefinitions({\n        name: 'User',\n        nodeType: userType\n    });\n    function getUserConnection() {\n        return {\n            type: userConnection.connectionType,\n            args: connectionArgs,\n            resolve: (_, args, ctx) => {\n                log('getting users');\n                return connectionFromPromisedArray(userApp.find({\n                    query: {},\n                    options: { limit: args.first },\n                    createdBy: ctx.createdBy\n                }), args);\n            }\n        };\n    }\n    function getSaveUserMutation(outputViewer) {\n        return mutationWithClientMutationId({\n            name: 'SaveUser',\n            inputFields: {\n                id: { type: GraphQLString },\n                userName: { type: new GraphQLNonNull(GraphQLString) },\n                email: { type: new GraphQLNonNull(GraphQLString) },\n                displayName: { type: new GraphQLNonNull(GraphQLString) },\n                password: { type: new GraphQLNonNull(GraphQLString) },\n                errors: { type: new GraphQLList(GraphQLString) }\n            },\n            outputFields: {\n                userEdge: {\n                    type: userConnection.edgeType,\n                    resolve: (user) => {\n                        log('ql user', user);\n                        return { node: user, cursor: user.id };\n                    }\n                },\n                viewer: outputViewer\n            },\n            mutateAndGetPayload: async (userArgs, param2, param3) => {\n                try {\n                    log('saving user:', userArgs);\n                    log('saving param2:', param2);\n                    log('saving param3:', param3);\n                    const savedUser = await userApp.save({\n                        userArgs,\n                        createdBy: null // TODO: FIX IT! SEND createdBy from context\n                    });\n                    log('saved user:', savedUser);\n                    return savedUser;\n                }\n                catch (e) {\n                    log('Error saving user:', e);\n                }\n            }\n        });\n    }\n    function getAuthTokenMutation(outputViewer) {\n        return mutationWithClientMutationId({\n            name: 'GetAuthToken',\n            inputFields: {\n                userNameOrEmail: { type: new GraphQLNonNull(GraphQLString) },\n                password: { type: new GraphQLNonNull(GraphQLString) }\n            },\n            outputFields: {\n                userEdge: {\n                    type: userConnection.edgeType,\n                    resolve: (authToken) => {\n                        if (authToken.user == null)\n                            return null;\n                        return { node: authToken.user, cursor: authToken.user.id };\n                    }\n                },\n                authToken: {\n                    type: GraphQLString,\n                    resolve: (authToken) => authToken.authToken\n                },\n                errors: {\n                    type: new GraphQLList(GraphQLString),\n                    resolve: (authToken) => authToken.errors\n                },\n                viewer: outputViewer\n            },\n            mutateAndGetPayload: async (form, param2, param3) => {\n                try {\n                    log('getAuthToken input:', form);\n                    const authToken = await userApp.getAuthToken({\n                        form,\n                        createdBy: null // TODO: FIX IT! SEND createdBy from context\n                    });\n                    log('getAuthToken return:', authToken);\n                    return authToken;\n                }\n                catch (e) {\n                    log('Error saving user:', e);\n                }\n            }\n        });\n    }\n    return {\n        getSaveUserMutation,\n        getUserConnection,\n        getAuthTokenMutation\n    };\n}\nexport default UserSchema;\n//# sourceMappingURL=userSchema.js.map"]}