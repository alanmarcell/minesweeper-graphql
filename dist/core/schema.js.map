{"version":3,"sources":["../../dist-esnext/core/schema.js"],"names":["Schema","userApp","log","appSchema","menuSchema","userSchema","viewer","viewerType","name","fields","id","app","type","appType","resolve","menu","menuType","userConnection","getUserConnection","outputViewer","schema","query","mutation","saveUser","getSaveUserMutation","getAuthToken","getAuthTokenMutation"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AACA,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,GAAzB,EAA8B;AAC1B,MAAMC,YAAY,wBAAU;AAAED;AAAF,GAAV,CAAlB;AACA,MAAME,aAAa,yBAAW;AAAEF;AAAF,GAAX,CAAnB;AACA,MAAMG,aAAa,yBAAW;AAAEJ,oBAAF;AAAWC;AAAX,GAAX,CAAnB;AACA,MAAMI,SAAS,EAAf;AACA,MAAMC,aAAa,+BAAsB;AACrCC,UAAM,QAD+B;AAErCC,YAAQ;AAAA,aAAO;AACXC,YAAI,iCAAc,QAAd,CADO;AAEXC,aAAK;AAAEC,gBAAMT,UAAUU,OAAlB;AAA2BC,mBAAS;AAAA;AAAA;AAApC,SAFM;AAGXC,cAAM;AAAEH,gBAAMR,WAAWY,QAAnB;AAA6BF,mBAAS;AAAA;AAAA;AAAtC,SAHK;AAIXG,wBAAgBZ,WAAWa,iBAAX;AAJL,OAAP;AAAA;AAF6B,GAAtB,CAAnB;AASA,MAAMC,eAAe;AACjBP,UAAML,UADW;AAEjBO,aAAS;AAAA,aAAMR,MAAN;AAAA;AAFQ,GAArB;AAIA,MAAMc,SAAS,2BAAkB;AAC7BC,WAAO,+BAAsB;AACzBb,YAAM,OADmB;AAEzBC,cAAQ;AAAA,eAAO;AACXH,kBAAQ;AACJM,kBAAML,UADF;AAEJO,qBAAS;AAAA,qBAAMR,MAAN;AAAA;AAFL;AADG,SAAP;AAAA;AAFiB,KAAtB,CADsB;AAU7BgB,cAAU,+BAAsB;AAC5Bd,YAAM,UADsB;AAE5BC,cAAQ;AAAA,eAAO;AACXc,oBAAUlB,WAAWmB,mBAAX,CAA+BL,YAA/B,CADC;AAEXM,wBAAcpB,WAAWqB,oBAAX,CAAgCP,YAAhC;AAFH,SAAP;AAAA;AAFoB,KAAtB;AAVmB,GAAlB,CAAf;AAkBA,SAAOC,MAAP;AACH;;eACcpB,M,EACf","file":"schema.js","sourcesContent":["import MenuSchema, { menu } from '../menus/menuSchema';\nimport UserSchema from '../users/userSchema';\nimport AppSchema, { app } from './appSchema';\nimport { GraphQLObjectType, GraphQLSchema } from 'graphql';\nimport { globalIdField } from 'graphql-relay';\nfunction Schema(userApp, log) {\n    const appSchema = AppSchema({ log });\n    const menuSchema = MenuSchema({ log });\n    const userSchema = UserSchema({ userApp, log });\n    const viewer = {};\n    const viewerType = new GraphQLObjectType({\n        name: 'Viewer',\n        fields: () => ({\n            id: globalIdField('Viewer'),\n            app: { type: appSchema.appType, resolve: () => app },\n            menu: { type: menuSchema.menuType, resolve: () => menu },\n            userConnection: userSchema.getUserConnection()\n        })\n    });\n    const outputViewer = {\n        type: viewerType,\n        resolve: () => viewer\n    };\n    const schema = new GraphQLSchema({\n        query: new GraphQLObjectType({\n            name: 'Query',\n            fields: () => ({\n                viewer: {\n                    type: viewerType,\n                    resolve: () => viewer\n                }\n            })\n        }),\n        mutation: new GraphQLObjectType({\n            name: 'Mutation',\n            fields: () => ({\n                saveUser: userSchema.getSaveUserMutation(outputViewer),\n                getAuthToken: userSchema.getAuthTokenMutation(outputViewer)\n            })\n        })\n    });\n    return schema;\n}\nexport default Schema;\n//# sourceMappingURL=schema.js.map"]}